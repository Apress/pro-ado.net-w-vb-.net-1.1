'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.209
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Students
    Inherits DataSet
    
    Private tableStudent As StudentDataTable
    
    Private table_Class As _ClassDataTable
    
    Private relationStudentClasses As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Student")) Is Nothing) Then
                Me.Tables.Add(New StudentDataTable(ds.Tables("Student")))
            End If
            If (Not (ds.Tables("Class")) Is Nothing) Then
                Me.Tables.Add(New _ClassDataTable(ds.Tables("Class")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Student As StudentDataTable
        Get
            Return Me.tableStudent
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _Class As _ClassDataTable
        Get
            Return Me.table_Class
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Students = CType(MyBase.Clone,Students)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Student")) Is Nothing) Then
            Me.Tables.Add(New StudentDataTable(ds.Tables("Student")))
        End If
        If (Not (ds.Tables("Class")) Is Nothing) Then
            Me.Tables.Add(New _ClassDataTable(ds.Tables("Class")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableStudent = CType(Me.Tables("Student"),StudentDataTable)
        If (Not (Me.tableStudent) Is Nothing) Then
            Me.tableStudent.InitVars
        End If
        Me.table_Class = CType(Me.Tables("Class"),_ClassDataTable)
        If (Not (Me.table_Class) Is Nothing) Then
            Me.table_Class.InitVars
        End If
        Me.relationStudentClasses = Me.Relations("StudentClasses")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Students"
        Me.Prefix = ""
        Me.Namespace = ""
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableStudent = New StudentDataTable
        Me.Tables.Add(Me.tableStudent)
        Me.table_Class = New _ClassDataTable
        Me.Tables.Add(Me.table_Class)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("StudentClasses", New DataColumn() {Me.tableStudent.IDColumn}, New DataColumn() {Me.table_Class.StudentIDColumn})
        Me.table_Class.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        Me.relationStudentClasses = New DataRelation("StudentClasses", New DataColumn() {Me.tableStudent.IDColumn}, New DataColumn() {Me.table_Class.StudentIDColumn}, false)
        Me.relationStudentClasses.Nested = true
        Me.Relations.Add(Me.relationStudentClasses)
    End Sub
    
    Private Function ShouldSerializeStudent() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize_Class() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub StudentRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentRowChangeEvent)
    
    Public Delegate Sub _ClassRowChangeEventHandler(ByVal sender As Object, ByVal e As _ClassRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StudentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnName As DataColumn
        
        Private columnID As DataColumn
        
        Private columnGPA As DataColumn
        
        Friend Sub New()
            MyBase.New("Student")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property GPAColumn As DataColumn
            Get
                Return Me.columnGPA
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentRow
            Get
                Return CType(Me.Rows(index),StudentRow)
            End Get
        End Property
        
        Public Event StudentRowChanged As StudentRowChangeEventHandler
        
        Public Event StudentRowChanging As StudentRowChangeEventHandler
        
        Public Event StudentRowDeleted As StudentRowChangeEventHandler
        
        Public Event StudentRowDeleting As StudentRowChangeEventHandler
        
        Public Overloads Sub AddStudentRow(ByVal row As StudentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStudentRow(ByVal Name As String, ByVal ID As Integer, ByVal GPA As Single) As StudentRow
            Dim rowStudentRow As StudentRow = CType(Me.NewRow,StudentRow)
            rowStudentRow.ItemArray = New Object() {Name, ID, GPA}
            Me.Rows.Add(rowStudentRow)
            Return rowStudentRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As StudentRow
            Return CType(Me.Rows.Find(New Object() {ID}),StudentRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As StudentDataTable = CType(MyBase.Clone,StudentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New StudentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnName = Me.Columns("Name")
            Me.columnID = Me.Columns("ID")
            Me.columnGPA = Me.Columns("GPA")
        End Sub
        
        Private Sub InitClass()
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnID)
            Me.columnGPA = New DataColumn("GPA", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGPA)
            Me.Constraints.Add(New UniqueConstraint("StudentID", New DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnID.Namespace = ""
        End Sub
        
        Public Function NewStudentRow() As StudentRow
            Return CType(Me.NewRow,StudentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New StudentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(StudentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentRowChanged(Me, New StudentRowChangeEvent(CType(e.Row,StudentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentRowChanging(Me, New StudentRowChangeEvent(CType(e.Row,StudentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentRowDeleted(Me, New StudentRowChangeEvent(CType(e.Row,StudentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentRowDeleting(Me, New StudentRowChangeEvent(CType(e.Row,StudentRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStudentRow(ByVal row As StudentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StudentRow
        Inherits DataRow
        
        Private tableStudent As StudentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudent = CType(Me.Table,StudentDataTable)
        End Sub
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableStudent.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudent.NameColumn) = value
            End Set
        End Property
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableStudent.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableStudent.IDColumn) = value
            End Set
        End Property
        
        Public Property GPA As Single
            Get
                Try 
                    Return CType(Me(Me.tableStudent.GPAColumn),Single)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudent.GPAColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableStudent.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableStudent.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGPANull() As Boolean
            Return Me.IsNull(Me.tableStudent.GPAColumn)
        End Function
        
        Public Sub SetGPANull()
            Me(Me.tableStudent.GPAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetClassRows() As _ClassRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("StudentClasses")),_ClassRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StudentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As StudentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As StudentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As StudentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ClassDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTitle As DataColumn
        
        Private columnRoom As DataColumn
        
        Private columnStudentID As DataColumn
        
        Friend Sub New()
            MyBase.New("Class")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TitleColumn As DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        Friend ReadOnly Property RoomColumn As DataColumn
            Get
                Return Me.columnRoom
            End Get
        End Property
        
        Friend ReadOnly Property StudentIDColumn As DataColumn
            Get
                Return Me.columnStudentID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As _ClassRow
            Get
                Return CType(Me.Rows(index),_ClassRow)
            End Get
        End Property
        
        Public Event _ClassRowChanged As _ClassRowChangeEventHandler
        
        Public Event _ClassRowChanging As _ClassRowChangeEventHandler
        
        Public Event _ClassRowDeleted As _ClassRowChangeEventHandler
        
        Public Event _ClassRowDeleting As _ClassRowChangeEventHandler
        
        Public Overloads Sub Add_ClassRow(ByVal row As _ClassRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add_ClassRow(ByVal Title As String, ByVal Room As String, ByVal parentStudentRowByStudentClasses As StudentRow) As _ClassRow
            Dim row_ClassRow As _ClassRow = CType(Me.NewRow,_ClassRow)
            row_ClassRow.ItemArray = New Object() {Title, Room, parentStudentRowByStudentClasses(1)}
            Me.Rows.Add(row_ClassRow)
            Return row_ClassRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As _ClassDataTable = CType(MyBase.Clone,_ClassDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New _ClassDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTitle = Me.Columns("Title")
            Me.columnRoom = Me.Columns("Room")
            Me.columnStudentID = Me.Columns("StudentID")
        End Sub
        
        Private Sub InitClass()
            Me.columnTitle = New DataColumn("Title", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnTitle)
            Me.columnRoom = New DataColumn("Room", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnRoom)
            Me.columnStudentID = New DataColumn("StudentID", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnStudentID)
            Me.columnTitle.Namespace = ""
            Me.columnRoom.Namespace = ""
            Me.columnStudentID.Namespace = ""
        End Sub
        
        Public Function New_ClassRow() As _ClassRow
            Return CType(Me.NewRow,_ClassRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New _ClassRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(_ClassRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._ClassRowChangedEvent) Is Nothing) Then
                RaiseEvent _ClassRowChanged(Me, New _ClassRowChangeEvent(CType(e.Row,_ClassRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._ClassRowChangingEvent) Is Nothing) Then
                RaiseEvent _ClassRowChanging(Me, New _ClassRowChangeEvent(CType(e.Row,_ClassRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._ClassRowDeletedEvent) Is Nothing) Then
                RaiseEvent _ClassRowDeleted(Me, New _ClassRowChangeEvent(CType(e.Row,_ClassRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._ClassRowDeletingEvent) Is Nothing) Then
                RaiseEvent _ClassRowDeleting(Me, New _ClassRowChangeEvent(CType(e.Row,_ClassRow), e.Action))
            End If
        End Sub
        
        Public Sub Remove_ClassRow(ByVal row As _ClassRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ClassRow
        Inherits DataRow
        
        Private table_Class As _ClassDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table_Class = CType(Me.Table,_ClassDataTable)
        End Sub
        
        Public Property Title As String
            Get
                Try 
                    Return CType(Me(Me.table_Class.TitleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Class.TitleColumn) = value
            End Set
        End Property
        
        Public Property Room As String
            Get
                Try 
                    Return CType(Me(Me.table_Class.RoomColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Class.RoomColumn) = value
            End Set
        End Property
        
        Public Property StudentRow As StudentRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("StudentClasses")),StudentRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("StudentClasses"))
            End Set
        End Property
        
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.table_Class.TitleColumn)
        End Function
        
        Public Sub SetTitleNull()
            Me(Me.table_Class.TitleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRoomNull() As Boolean
            Return Me.IsNull(Me.table_Class.RoomColumn)
        End Function
        
        Public Sub SetRoomNull()
            Me(Me.table_Class.RoomColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ClassRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As _ClassRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As _ClassRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As _ClassRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
