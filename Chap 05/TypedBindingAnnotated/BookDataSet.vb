'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class BookDataSet
    Inherits DataSet
    
    Private tableBooks As BooksDataTable
    
    Private tableBookReviews As BookReviewsDataTable
    
    Private relationReviews As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Books")) Is Nothing) Then
                Me.Tables.Add(New BooksDataTable(ds.Tables("Books")))
            End If
            If (Not (ds.Tables("BookReviews")) Is Nothing) Then
                Me.Tables.Add(New BookReviewsDataTable(ds.Tables("BookReviews")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Books As BooksDataTable
        Get
            Return Me.tableBooks
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BookReviews As BookReviewsDataTable
        Get
            Return Me.tableBookReviews
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As BookDataSet = CType(MyBase.Clone,BookDataSet)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Books")) Is Nothing) Then
            Me.Tables.Add(New BooksDataTable(ds.Tables("Books")))
        End If
        If (Not (ds.Tables("BookReviews")) Is Nothing) Then
            Me.Tables.Add(New BookReviewsDataTable(ds.Tables("BookReviews")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBooks = CType(Me.Tables("Books"),BooksDataTable)
        If (Not (Me.tableBooks) Is Nothing) Then
            Me.tableBooks.InitVars
        End If
        Me.tableBookReviews = CType(Me.Tables("BookReviews"),BookReviewsDataTable)
        If (Not (Me.tableBookReviews) Is Nothing) Then
            Me.tableBookReviews.InitVars
        End If
        Me.relationReviews = Me.Relations("Reviews")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "BookDataSet"
        Me.Prefix = ""
        Me.Namespace = "urn:apress-proadonet-chapter5-BookDataSet.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBooks = New BooksDataTable
        Me.Tables.Add(Me.tableBooks)
        Me.tableBookReviews = New BookReviewsDataTable
        Me.Tables.Add(Me.tableBookReviews)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("Reviews", New DataColumn() {Me.tableBooks.BookIDColumn}, New DataColumn() {Me.tableBookReviews.BookIDColumn})
        Me.tableBookReviews.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationReviews = New DataRelation("Reviews", New DataColumn() {Me.tableBooks.BookIDColumn}, New DataColumn() {Me.tableBookReviews.BookIDColumn}, false)
        Me.Relations.Add(Me.relationReviews)
    End Sub
    
    Private Function ShouldSerializeBooks() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBookReviews() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BookChangeEventHandler(ByVal sender As Object, ByVal e As BookChangeEvent)
    
    Public Delegate Sub BookReviewChangeEventHandler(ByVal sender As Object, ByVal e As BookReviewChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BooksDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBookID As DataColumn
        
        Private columnTitle As DataColumn
        
        Private columnPublisher As DataColumn
        
        Friend Sub New()
            MyBase.New("Books")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BookIDColumn As DataColumn
            Get
                Return Me.columnBookID
            End Get
        End Property
        
        Friend ReadOnly Property TitleColumn As DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        Friend ReadOnly Property PublisherColumn As DataColumn
            Get
                Return Me.columnPublisher
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Book
            Get
                Return CType(Me.Rows(index),Book)
            End Get
        End Property
        
        Public Event BookChanged As BookChangeEventHandler
        
        Public Event BookChanging As BookChangeEventHandler
        
        Public Event BookDeleted As BookChangeEventHandler
        
        Public Event BookDeleting As BookChangeEventHandler
        
        Public Overloads Sub AddBook(ByVal row As Book)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBook(ByVal BookID As Long, ByVal Title As String, ByVal Publisher As String) As Book
            Dim rowBook As Book = CType(Me.NewRow,Book)
            rowBook.ItemArray = New Object() {BookID, Title, Publisher}
            Me.Rows.Add(rowBook)
            Return rowBook
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BooksDataTable = CType(MyBase.Clone,BooksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BooksDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBookID = Me.Columns("BookID")
            Me.columnTitle = Me.Columns("Title")
            Me.columnPublisher = Me.Columns("Publisher")
        End Sub
        
        Private Sub InitClass()
            Me.columnBookID = New DataColumn("BookID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBookID)
            Me.columnTitle = New DataColumn("Title", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitle)
            Me.columnPublisher = New DataColumn("Publisher", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPublisher)
            Me.Constraints.Add(New UniqueConstraint("KeyBookID", New DataColumn() {Me.columnBookID}, false))
            Me.columnBookID.AllowDBNull = false
            Me.columnBookID.Unique = true
            Me.columnTitle.AllowDBNull = false
            Me.columnPublisher.AllowDBNull = false
        End Sub
        
        Public Function NewBook() As Book
            Return CType(Me.NewRow,Book)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Book(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Book)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BookChangedEvent) Is Nothing) Then
                RaiseEvent BookChanged(Me, New BookChangeEvent(CType(e.Row,Book), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BookChangingEvent) Is Nothing) Then
                RaiseEvent BookChanging(Me, New BookChangeEvent(CType(e.Row,Book), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BookDeletedEvent) Is Nothing) Then
                RaiseEvent BookDeleted(Me, New BookChangeEvent(CType(e.Row,Book), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BookDeletingEvent) Is Nothing) Then
                RaiseEvent BookDeleting(Me, New BookChangeEvent(CType(e.Row,Book), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBook(ByVal row As Book)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Book
        Inherits DataRow
        
        Private tableBooks As BooksDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBooks = CType(Me.Table,BooksDataTable)
        End Sub
        
        Public Property BookID As Long
            Get
                Return CType(Me(Me.tableBooks.BookIDColumn),Long)
            End Get
            Set
                Me(Me.tableBooks.BookIDColumn) = value
            End Set
        End Property
        
        Public Property Title As String
            Get
                Return CType(Me(Me.tableBooks.TitleColumn),String)
            End Get
            Set
                Me(Me.tableBooks.TitleColumn) = value
            End Set
        End Property
        
        Public Property Publisher As String
            Get
                Return CType(Me(Me.tableBooks.PublisherColumn),String)
            End Get
            Set
                Me(Me.tableBooks.PublisherColumn) = value
            End Set
        End Property
        
        Public Function Reviews() As BookReview()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Reviews")),BookReview())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BookChangeEvent
        Inherits EventArgs
        
        Private eventRow As Book
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Book, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Book
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BookReviewsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBookID As DataColumn
        
        Private columnRating As DataColumn
        
        Private columnReview As DataColumn
        
        Friend Sub New()
            MyBase.New("BookReviews")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BookIDColumn As DataColumn
            Get
                Return Me.columnBookID
            End Get
        End Property
        
        Friend ReadOnly Property RatingColumn As DataColumn
            Get
                Return Me.columnRating
            End Get
        End Property
        
        Friend ReadOnly Property ReviewColumn As DataColumn
            Get
                Return Me.columnReview
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BookReview
            Get
                Return CType(Me.Rows(index),BookReview)
            End Get
        End Property
        
        Public Event BookReviewChanged As BookReviewChangeEventHandler
        
        Public Event BookReviewChanging As BookReviewChangeEventHandler
        
        Public Event BookReviewDeleted As BookReviewChangeEventHandler
        
        Public Event BookReviewDeleting As BookReviewChangeEventHandler
        
        Public Overloads Sub AddBookReview(ByVal row As BookReview)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBookReview(ByVal parentBookByReviews As Book, ByVal Rating As Long, ByVal Review As String) As BookReview
            Dim rowBookReview As BookReview = CType(Me.NewRow,BookReview)
            rowBookReview.ItemArray = New Object() {parentBookByReviews(0), Rating, Review}
            Me.Rows.Add(rowBookReview)
            Return rowBookReview
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BookReviewsDataTable = CType(MyBase.Clone,BookReviewsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BookReviewsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBookID = Me.Columns("BookID")
            Me.columnRating = Me.Columns("Rating")
            Me.columnReview = Me.Columns("Review")
        End Sub
        
        Private Sub InitClass()
            Me.columnBookID = New DataColumn("BookID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBookID)
            Me.columnRating = New DataColumn("Rating", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRating)
            Me.columnReview = New DataColumn("Review", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReview)
        End Sub
        
        Public Function NewBookReview() As BookReview
            Return CType(Me.NewRow,BookReview)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BookReview(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BookReview)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BookReviewChangedEvent) Is Nothing) Then
                RaiseEvent BookReviewChanged(Me, New BookReviewChangeEvent(CType(e.Row,BookReview), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BookReviewChangingEvent) Is Nothing) Then
                RaiseEvent BookReviewChanging(Me, New BookReviewChangeEvent(CType(e.Row,BookReview), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BookReviewDeletedEvent) Is Nothing) Then
                RaiseEvent BookReviewDeleted(Me, New BookReviewChangeEvent(CType(e.Row,BookReview), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BookReviewDeletingEvent) Is Nothing) Then
                RaiseEvent BookReviewDeleting(Me, New BookReviewChangeEvent(CType(e.Row,BookReview), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBookReview(ByVal row As BookReview)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BookReview
        Inherits DataRow
        
        Private tableBookReviews As BookReviewsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBookReviews = CType(Me.Table,BookReviewsDataTable)
        End Sub
        
        Public Property BookID As Long
            Get
                Try 
                    Return CType(Me(Me.tableBookReviews.BookIDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookReviews.BookIDColumn) = value
            End Set
        End Property
        
        Public Property Rating As Long
            Get
                Try 
                    Return CType(Me(Me.tableBookReviews.RatingColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookReviews.RatingColumn) = value
            End Set
        End Property
        
        Public Property Review As String
            Get
                Try 
                    Return CType(Me(Me.tableBookReviews.ReviewColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookReviews.ReviewColumn) = value
            End Set
        End Property
        
        Public Property Book As Book
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Reviews")),Book)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Reviews"))
            End Set
        End Property
        
        Public Function IsBookIDNull() As Boolean
            Return Me.IsNull(Me.tableBookReviews.BookIDColumn)
        End Function
        
        Public Sub SetBookIDNull()
            Me(Me.tableBookReviews.BookIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRatingNull() As Boolean
            Return Me.IsNull(Me.tableBookReviews.RatingColumn)
        End Function
        
        Public Sub SetRatingNull()
            Me(Me.tableBookReviews.RatingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReviewNull() As Boolean
            Return Me.IsNull(Me.tableBookReviews.ReviewColumn)
        End Function
        
        Public Sub SetReviewNull()
            Me(Me.tableBookReviews.ReviewColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BookReviewChangeEvent
        Inherits EventArgs
        
        Private eventRow As BookReview
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BookReview, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BookReview
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
