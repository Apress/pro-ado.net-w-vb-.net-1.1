'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.209
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ds
    Inherits DataSet
    
    Private tabletabFlights As tabFlightsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tabFlights")) Is Nothing) Then
                Me.Tables.Add(New tabFlightsDataTable(ds.Tables("tabFlights")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tabFlights As tabFlightsDataTable
        Get
            Return Me.tabletabFlights
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ds = CType(MyBase.Clone,ds)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("tabFlights")) Is Nothing) Then
            Me.Tables.Add(New tabFlightsDataTable(ds.Tables("tabFlights")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tabletabFlights = CType(Me.Tables("tabFlights"),tabFlightsDataTable)
        If (Not (Me.tabletabFlights) Is Nothing) Then
            Me.tabletabFlights.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ds"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ds.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tabletabFlights = New tabFlightsDataTable
        Me.Tables.Add(Me.tabletabFlights)
    End Sub
    
    Private Function ShouldSerializetabFlights() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub tabFlightsRowChangeEventHandler(ByVal sender As Object, ByVal e As tabFlightsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tabFlightsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFLIGHTCODE As DataColumn
        
        Private columnLeaveFrom As DataColumn
        
        Private columnGoingTo As DataColumn
        
        Private columnDepart As DataColumn
        
        Private columnArrive As DataColumn
        
        Friend Sub New()
            MyBase.New("tabFlights")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FLIGHTCODEColumn As DataColumn
            Get
                Return Me.columnFLIGHTCODE
            End Get
        End Property
        
        Friend ReadOnly Property LeaveFromColumn As DataColumn
            Get
                Return Me.columnLeaveFrom
            End Get
        End Property
        
        Friend ReadOnly Property GoingToColumn As DataColumn
            Get
                Return Me.columnGoingTo
            End Get
        End Property
        
        Friend ReadOnly Property DepartColumn As DataColumn
            Get
                Return Me.columnDepart
            End Get
        End Property
        
        Friend ReadOnly Property ArriveColumn As DataColumn
            Get
                Return Me.columnArrive
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tabFlightsRow
            Get
                Return CType(Me.Rows(index),tabFlightsRow)
            End Get
        End Property
        
        Public Event tabFlightsRowChanged As tabFlightsRowChangeEventHandler
        
        Public Event tabFlightsRowChanging As tabFlightsRowChangeEventHandler
        
        Public Event tabFlightsRowDeleted As tabFlightsRowChangeEventHandler
        
        Public Event tabFlightsRowDeleting As tabFlightsRowChangeEventHandler
        
        Public Overloads Sub AddtabFlightsRow(ByVal row As tabFlightsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtabFlightsRow(ByVal FLIGHTCODE As String, ByVal LeaveFrom As String, ByVal GoingTo As String, ByVal Depart As Date, ByVal Arrive As Date) As tabFlightsRow
            Dim rowtabFlightsRow As tabFlightsRow = CType(Me.NewRow,tabFlightsRow)
            rowtabFlightsRow.ItemArray = New Object() {FLIGHTCODE, LeaveFrom, GoingTo, Depart, Arrive}
            Me.Rows.Add(rowtabFlightsRow)
            Return rowtabFlightsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tabFlightsDataTable = CType(MyBase.Clone,tabFlightsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tabFlightsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFLIGHTCODE = Me.Columns("FLIGHTCODE")
            Me.columnLeaveFrom = Me.Columns("LeaveFrom")
            Me.columnGoingTo = Me.Columns("GoingTo")
            Me.columnDepart = Me.Columns("Depart")
            Me.columnArrive = Me.Columns("Arrive")
        End Sub
        
        Private Sub InitClass()
            Me.columnFLIGHTCODE = New DataColumn("FLIGHTCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFLIGHTCODE)
            Me.columnLeaveFrom = New DataColumn("LeaveFrom", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLeaveFrom)
            Me.columnGoingTo = New DataColumn("GoingTo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGoingTo)
            Me.columnDepart = New DataColumn("Depart", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDepart)
            Me.columnArrive = New DataColumn("Arrive", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArrive)
            Me.columnFLIGHTCODE.AllowDBNull = false
        End Sub
        
        Public Function NewtabFlightsRow() As tabFlightsRow
            Return CType(Me.NewRow,tabFlightsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tabFlightsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tabFlightsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tabFlightsRowChangedEvent) Is Nothing) Then
                RaiseEvent tabFlightsRowChanged(Me, New tabFlightsRowChangeEvent(CType(e.Row,tabFlightsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tabFlightsRowChangingEvent) Is Nothing) Then
                RaiseEvent tabFlightsRowChanging(Me, New tabFlightsRowChangeEvent(CType(e.Row,tabFlightsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tabFlightsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tabFlightsRowDeleted(Me, New tabFlightsRowChangeEvent(CType(e.Row,tabFlightsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tabFlightsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tabFlightsRowDeleting(Me, New tabFlightsRowChangeEvent(CType(e.Row,tabFlightsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetabFlightsRow(ByVal row As tabFlightsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tabFlightsRow
        Inherits DataRow
        
        Private tabletabFlights As tabFlightsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletabFlights = CType(Me.Table,tabFlightsDataTable)
        End Sub
        
        Public Property FLIGHTCODE As String
            Get
                Return CType(Me(Me.tabletabFlights.FLIGHTCODEColumn),String)
            End Get
            Set
                Me(Me.tabletabFlights.FLIGHTCODEColumn) = value
            End Set
        End Property
        
        Public Property LeaveFrom As String
            Get
                Try 
                    Return CType(Me(Me.tabletabFlights.LeaveFromColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletabFlights.LeaveFromColumn) = value
            End Set
        End Property
        
        Public Property GoingTo As String
            Get
                Try 
                    Return CType(Me(Me.tabletabFlights.GoingToColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletabFlights.GoingToColumn) = value
            End Set
        End Property
        
        Public Property Depart As Date
            Get
                Try 
                    Return CType(Me(Me.tabletabFlights.DepartColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletabFlights.DepartColumn) = value
            End Set
        End Property
        
        Public Property Arrive As Date
            Get
                Try 
                    Return CType(Me(Me.tabletabFlights.ArriveColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletabFlights.ArriveColumn) = value
            End Set
        End Property
        
        Public Function IsLeaveFromNull() As Boolean
            Return Me.IsNull(Me.tabletabFlights.LeaveFromColumn)
        End Function
        
        Public Sub SetLeaveFromNull()
            Me(Me.tabletabFlights.LeaveFromColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGoingToNull() As Boolean
            Return Me.IsNull(Me.tabletabFlights.GoingToColumn)
        End Function
        
        Public Sub SetGoingToNull()
            Me(Me.tabletabFlights.GoingToColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDepartNull() As Boolean
            Return Me.IsNull(Me.tabletabFlights.DepartColumn)
        End Function
        
        Public Sub SetDepartNull()
            Me(Me.tabletabFlights.DepartColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArriveNull() As Boolean
            Return Me.IsNull(Me.tabletabFlights.ArriveColumn)
        End Function
        
        Public Sub SetArriveNull()
            Me(Me.tabletabFlights.ArriveColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tabFlightsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tabFlightsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tabFlightsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tabFlightsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
